//Flawed implementation that doesn't work well for long strings. 
//Implemented it right to left but a better solution would be inside out. Start at the center and move right and left. 
public class Solution {
    public string LongestPalindrome(string s) {
        string Palindrome="", retPalindrome="";
        int currPalLength=0;
        
        if (s.Length==1)
            return s;
        
        
        
      try{  
        for (int a=0;a<s.Length;a++)
        {
          
             if (currPalLength>=s.Length/2 && s.Length>100)
                {
                    return retPalindrome;
                }
            
            for(int i=a;i<s.Length;i++)
                {
                    Palindrome = s.Substring(a,s.Length-i);
                    if (isPalindrome(Palindrome)==1)
                        {
                             if (Palindrome.Length > currPalLength )
                                {
                                    retPalindrome = Palindrome;
                                    currPalLength=Palindrome.Length;
               
                                    if (currPalLength==s.Length )
                                        return s;
                                    if (currPalLength>=s.Length/2 && s.Length>100)
                                        return retPalindrome;
                                        
                                }
                        }
                
                }
            }
        
       return retPalindrome;
      }
       catch(Exception e) {
           Console.WriteLine(retPalindrome + e);
           return retPalindrome;
       }
        
    }
    
    public int isPalindrome1(string s)
    {
        int sLen = s.Length;
        
        int isPal = 1;
       
        for (int i=0;i<sLen;i++)
        {
            if (i<sLen-1-i)
            {
                if (s.Substring(i,1) == s.Substring(sLen-1-i,1))
            {
                
                isPal=1;
            }
            else 
            {
            
                return 0;
            }
            }
        }
        return isPal;
        
    }
    
    public int isPalindrome(string s)
    {
        int sLen = s.Length;
        
        int isPal = 1;
       
        for (int i=0;i<sLen;i++)
        {
            if (i<sLen-1-i)
            {
                if (s.Substring(i,1) == s.Substring(sLen-1-i,1))
            {
                
                isPal=1;
            }
            else 
            {
            
                return 0;
            }
            }
        }
        return isPal;
        
    }
}
